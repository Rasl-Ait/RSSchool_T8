//
//  ColorStyle.m
//  RSSchool_T8
//
//  Created by rasl on 7/18/21.
//  Copyright Â© 2021 (null). All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//

#import "ColorStyle.h"


@implementation ColorStyle

#pragma mark Initialization

+ (void)initialize
{
}

//// In Trial version of PaintCode, the code generation is limited to 3 canvases.
#pragma mark Drawing Methods

+ (void)drawCanvas1
{
    [ColorStyle drawCanvas1WithFrame: CGRectMake(0, 0, 240, 120) resizing: ColorStyleResizingBehaviorStretch];
}

+ (void)drawCanvas1WithFrame: (CGRect)targetFrame resizing: (ColorStyleResizingBehavior)resizing
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = ColorStyleResizingBehaviorApply(resizing, CGRectMake(0, 0, 240, 120), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 240, resizedFrame.size.height / 120);


    //// Color Declarations
    UIColor* fillColor = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* fillColor2 = [UIColor colorWithRed: 0.886 green: 0.106 blue: 0.173 alpha: 1];

    //// unchecked.svg Group
    {
        //// Group 2
        {
            //// Rectangle Drawing
            UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(90, 22, 40, 40) cornerRadius: 10];
            [fillColor setFill];
            [rectanglePath fill];
        }


        //// Rectangle 2 Drawing
        UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(98, 30, 24, 24) cornerRadius: 6];
        [fillColor2 setFill];
        [rectangle2Path fill];
    }
    
    CGContextRestoreGState(context);

}

@end



CGRect ColorStyleResizingBehaviorApply(ColorStyleResizingBehavior behavior, CGRect rect, CGRect target)
{
    if (CGRectEqualToRect(rect, target) || CGRectEqualToRect(target, CGRectZero))
        return rect;

    CGSize scales = CGSizeZero;
    scales.width = ABS(target.size.width / rect.size.width);
    scales.height = ABS(target.size.height / rect.size.height);

    switch (behavior)
    {
        case ColorStyleResizingBehaviorAspectFit:
        {
            scales.width = MIN(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case ColorStyleResizingBehaviorAspectFill:
        {
            scales.width = MAX(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case ColorStyleResizingBehaviorStretch:
            break;
        case ColorStyleResizingBehaviorCenter:
        {
            scales.width = 1;
            scales.height = 1;
            break;
        }
    }

    CGRect result = CGRectStandardize(rect);
    result.size.width *= scales.width;
    result.size.height *= scales.height;
    result.origin.x = target.origin.x + (target.size.width - result.size.width) / 2;
    result.origin.y = target.origin.y + (target.size.height - result.size.height) / 2;
    return result;
}
